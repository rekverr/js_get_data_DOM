{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCGA,IAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAiB,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAC3C,EAAkB,SAAS,aAAa,CAAC,qBACzC,EAAoB,SAAS,aAAa,CAAC,uBAE7C,EAAQ,EAEN,EAAU,EACb,GAAG,CAAC,SAAC,CADR,EAEI,OAAO,EAAG,WAAW,AACvB,GACC,GAAG,CAAC,SAAC,CADN,EAEE,OAAO,EAAG,UAAU,CAAC,IAAK,GAC5B,GACC,GAAG,CAAC,SAAC,CADN,EAEE,MAAO,CAAC,CACV,GAEG,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,I,EAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,GAAS,C,C,C,M,E,CADN,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,IAAM,EAAU,EAAQ,EAAQ,MAAM,AAEtC,CAAA,EAAgB,WAAW,CAAG,EAC9B,EAAkB,WAAW,CAAG","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write your code here\nvar population = _to_consumable_array(document.querySelectorAll(\".population\"));\nvar totalPopulation = document.querySelector(\".total-population\");\nvar averagePopulation = document.querySelector(\".average-population\");\nvar total = 0;\nvar setting = population.map(function(el) {\n    return el.textContent;\n}).map(function(el) {\n    return el.replaceAll(\",\", \"\");\n}).map(function(el2) {\n    return +el2;\n});\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = setting[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var ch = _step.value;\n        total += ch;\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nvar average = total / setting.length;\ntotalPopulation.textContent = total;\naveragePopulation.textContent = average;\n\n//# sourceMappingURL=index.edf50ebb.js.map\n","'use strict';\n\n// write your code here\nconst population = [...document.querySelectorAll('.population')];\nconst totalPopulation = document.querySelector('.total-population');\nconst averagePopulation = document.querySelector('.average-population');\n\nlet total = 0;\n\nconst setting = population\n  .map((el) => {\n    return el.textContent;\n  })\n  .map((el) => {\n    return el.replaceAll(',', '');\n  })\n  .map((el2) => {\n    return +el2;\n  });\n\nfor (const ch of setting) {\n  total += ch;\n}\n\nconst average = total / setting.length;\n\ntotalPopulation.textContent = total;\naveragePopulation.textContent = average;\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","population","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","totalPopulation","querySelector","averagePopulation","total","setting","map","el","textContent","replaceAll","el2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","ch","value","err","return","average"],"version":3,"file":"index.edf50ebb.js.map"}